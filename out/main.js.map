{"version":3,"file":"main.js","mappings":"mBAKAA,SAASC,iBAAiB,oBAAoB,KAC5CC,QAAQC,IAAI,0BAEZ,IAAIC,EAAoB,EACpBC,EAAgB,EACpB,MAEMC,EAAeN,SAASO,eAAe,SACvCC,EAAmBR,SAASO,eAAe,cAC3CE,EAAeT,SAASO,eAAe,kBAE7C,WAIE,IAHAH,GAkBO,IAfAA,GAVqB,KAW1BA,GAX0B,IAY1BC,IACAC,EAAaI,YAAcL,EAAMM,WAInC,MAAMC,EAA8BR,EAjBR,IAiBqC,IACjEK,EAAaI,MAAMC,MAAQ,GAAGF,KAG9BJ,EAAiBE,YAAcN,EAAUO,UAC3C,CAGAI,GAGA,MAAMC,EAAQhB,SAASO,eAAe,qBAChCU,EAAQjB,SAASO,eAAe,qBAChCW,EAAclB,SAASO,eAAe,2BACtCY,EAAWnB,SAASO,eAAe,eAEzCP,SAASO,eAAe,gBAAgBN,iBAAiB,SAAS,KAChEgB,EAAMP,YAAc,cACpBQ,EAAYR,YAAc,wGAC1BM,EAAMI,UAAUC,OAAO,SAAS,IAGlCrB,SAASO,eAAe,eAAeN,iBAAiB,SAAS,KAC/DgB,EAAMP,YAAc,aACpBQ,EAAYR,YAAc,6FAC1BM,EAAMI,UAAUC,OAAO,SAAS,IAGlCF,EAASlB,iBAAiB,SAAS,KACjCe,EAAMI,UAAUE,IAAI,SAAS,IAI/BC,OAAOtB,iBAAiB,SAAUuB,IAC5BA,EAAEC,SAAWT,GAAOA,EAAMI,UAAUE,IAAI,SAAS,IAIvDtB,SAASO,eAAe,kBAAkBN,iBAAiB,SAAS,KAElEyB,OAAOC,YAAY,CAAEC,QAAS,mBAAoB,IAIpDL,OAAOtB,iBAAiB,WAAY4B,IAClC,MAAMC,EAAUD,EAAME,KAEE,oBAApBD,EAAQF,UAEW5B,SAASO,eAAe,iBAChCG,YAAcoB,EAAQE,aACrC,IAcFC,iBACE,MAAMC,EAAalC,SAASO,eAAe,eAGrC4B,QAdRF,iBAEE,MAAO,CACL,CAAEG,KAAM,QAASC,GAAI,KACrB,CAAED,KAAM,MAAOC,GAAI,KACnB,CAAED,KAAM,UAAWC,GAAI,KAE3B,CAOwBC,GAGtBH,EAAQI,MAAK,CAACC,EAAGC,IAAMA,EAAEJ,GAAKG,EAAEH,KAGhCH,EAAWQ,UAAY,GAGvBP,EAAQQ,SAASC,IACf,MAAMC,EAAW7C,SAAS8C,cAAc,MACxCD,EAASH,UAAY,mBACXE,EAAOR,8BACPQ,EAAOP,uBAEjBH,EAAWa,YAAYF,EAAS,GAEpC,CAGAG,EAAqB,G","sources":["webpack://ecodebugger/./media/main.ts"],"sourcesContent":["// Declare the vscode API if provided externally (e.g., by VS Code Webview)\r\ndeclare const vscode: {\r\n  postMessage: (message: any) => void;\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  console.log('JavaScript is running!');\r\n\r\n  let currentXP: number = 0; // Initial XP\r\n  let level: number = 1; // Initial level\r\n  const xpToNextLevel: number = 200; // XP required to level up\r\n\r\n  const levelElement = document.getElementById(\"level\") as HTMLElement;\r\n  const currentXPElement = document.getElementById(\"current-xp\") as HTMLElement;\r\n  const progressFill = document.getElementById(\"progress-fill\") as HTMLElement;\r\n\r\n  function updateXP(newXP: number): void {\r\n    currentXP += newXP;\r\n\r\n    // Check if level up is needed\r\n    while (currentXP >= xpToNextLevel) {\r\n      currentXP -= xpToNextLevel; // Carry over extra XP\r\n      level++;\r\n      levelElement.textContent = level.toString(); // Update level in UI\r\n    }\r\n\r\n    // Update progress bar\r\n    const progressPercentage: number = (currentXP / xpToNextLevel) * 100;\r\n    progressFill.style.width = `${progressPercentage}%`;\r\n\r\n    // Update XP display\r\n    currentXPElement.textContent = currentXP.toString();\r\n  }\r\n\r\n  // Example: Add 50 XP\r\n  updateXP(600);\r\n\r\n  // Achievement: level up\r\n  const modal = document.getElementById(\"achievement-modal\") as HTMLElement;\r\n  const title = document.getElementById(\"achievement-title\") as HTMLElement;\r\n  const description = document.getElementById(\"achievement-description\") as HTMLElement;\r\n  const closeBtn = document.getElementById(\"close-modal\") as HTMLElement;\r\n\r\n  document.getElementById(\"green-coder\")?.addEventListener(\"click\", () => {\r\n    title.textContent = \"Green Coder\";\r\n    description.textContent = \"Awarded for writing energy-efficient code using best practices like map(), filter(), and async/await.\";\r\n    modal.classList.remove(\"hidden\");\r\n  });\r\n\r\n  document.getElementById(\"bug-slayer\")?.addEventListener(\"click\", () => {\r\n    title.textContent = \"Bug Slayer\";\r\n    description.textContent = \"Earned by identifying and resolving multiple logical errors or anti-patterns in your code.\";\r\n    modal.classList.remove(\"hidden\");\r\n  });\r\n\r\n  closeBtn.addEventListener(\"click\", () => {\r\n    modal.classList.add(\"hidden\");\r\n  });\r\n\r\n  // Optional: Close modal on background click\r\n  window.addEventListener(\"click\", (e) => {\r\n    if (e.target === modal) modal.classList.add(\"hidden\");\r\n  });\r\n\r\n  // Listen for the button click\r\n  document.getElementById(\"copy-code-btn\")?.addEventListener(\"click\", () => {\r\n    // Send a message to the VS Code extension to get the selected code\r\n    vscode.postMessage({ command: \"getSelectedCode\" });\r\n  });\r\n\r\n  // Listen for messages from the VS Code extension\r\n  window.addEventListener(\"message\", (event) => {\r\n    const message = event.data;\r\n\r\n    if (message.command === \"setSelectedCode\") {\r\n      // Update the analysis text with the selected code\r\n      const analysisText = document.getElementById(\"analysis-text\") as HTMLElement;\r\n      analysisText.textContent = message.selectedCode;\r\n    }\r\n  });\r\n\r\n  // Dummy fetchPlayerData function to simulate fetching player data\r\n  async function fetchPlayerData(): Promise<{ name: string; xp: number }[]> {\r\n    // Replace this with actual data fetching logic as needed\r\n    return [\r\n      { name: \"Alice\", xp: 350 },\r\n      { name: \"Bob\", xp: 200 },\r\n      { name: \"Charlie\", xp: 150 }\r\n    ];\r\n  }\r\n\r\n  // Function to render players in the \"Classroom Mode\" section\r\n  async function renderClassroomMode(): Promise<void> {\r\n    const playerList = document.getElementById(\"player-list\") as HTMLElement;\r\n\r\n    // Fetch player data\r\n    const players = await fetchPlayerData();\r\n\r\n    // Sort players by XP in descending order\r\n    players.sort((a, b) => b.xp - a.xp);\r\n\r\n    // Clear the existing list\r\n    playerList.innerHTML = \"\";\r\n\r\n    // Populate the list with player data\r\n    players.forEach((player) => {\r\n      const listItem = document.createElement(\"li\");\r\n      listItem.innerHTML = `\r\n        <span>${player.name}</span>\r\n        <span>${player.xp} XP</span>\r\n      `;\r\n      playerList.appendChild(listItem);\r\n    });\r\n  }\r\n\r\n  // Call the function to render the classroom mode\r\n  renderClassroomMode();\r\n});"],"names":["document","addEventListener","console","log","currentXP","level","levelElement","getElementById","currentXPElement","progressFill","textContent","toString","progressPercentage","style","width","updateXP","modal","title","description","closeBtn","classList","remove","add","window","e","target","vscode","postMessage","command","event","message","data","selectedCode","async","playerList","players","name","xp","fetchPlayerData","sort","a","b","innerHTML","forEach","player","listItem","createElement","appendChild","renderClassroomMode"],"sourceRoot":""}